# -*- coding: utf-8 -*-
"""Assigment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzZho8QpbN7oqEY-rKr7DPRcm7jdZm0Y

### Importing Important Libraries
"""

import pandas as pd # import panda library as pd for data manipulation
import matplotlib.pyplot as plt # import matplotlib as plt for data visualitzation
from matplotlib import style
import numpy as np # import nump as np
import seaborn as sns # seaborn is data visualization library build on matplotlib

"""### Implement a Function Which return Original DataFrame, Transposed DataFrames"""

def transpose_file(filename: str):

    # Read the file into a pandas dataframe
    dataframe = pd.read_csv(filename)

    # Transpose the dataframe
    df_transposed = dataframe.transpose()

    # Populate the header of the transposed dataframe with the header information

    # silice the dataframe to get the year as columns
    df_transposed.columns = df_transposed.iloc[1]

    # As year is now columns so we don't need it as rows
    transposed_year = df_transposed[0:].drop('year')

    # silice the dataframe to get the country as columns
    df_transposed.columns = df_transposed.iloc[0]

    # As country is now columns so we don't need it as rows
    transposed_country = df_transposed[0:].drop('country')

    return dataframe, transposed_country, transposed_year

# Passing filename to Real Worldbank data function
# will return three dataframe:
# org dataframe, transposed country as columns and transposed year as column

org_df, df_by_country, df_by_year = transpose_file('climatechange.csv')

"""### Original DataFrame"""

# show the first 5 row
org_df.head(5)

"""### show the statistics of Original Data"""

org_df.describe() #describe method show the statistic of dataframe

"""### DataFrame In Which Countries are Columns"""

# show the first 5 row
df_by_country.head(5)

"""### DataFrame In Which Year are Columns"""

# show the first 5 row
df_by_year

org_df.columns

"""### Create DataFrame related to Cereal yield Data
### For All the countries and years
"""

# we want to see countries cereal_yield over specfic years
# we need to filter our original data frame to get specific fields
cereal_data = org_df[['country','year','cereal_yield']]

# drop the null values present in the dataset
cereal_data = cereal_data.dropna()

"""### Get Data to Specific Years from 1990 to 2020"""

cereal_data_1990 = cereal_data[cereal_data['year'] == 1990] # filter data related to 1990
cereal_data_2000 = cereal_data[cereal_data['year'] == 2000] # filter data related to 2000
cereal_data_2010 = cereal_data[cereal_data['year'] == 2010] # filter data related to 2010
cereal_data_2015 = cereal_data[cereal_data['year'] == 2015] # filter data related to 2015
cereal_data_2020 = cereal_data[cereal_data['year'] == 2020] # filter data related to 2020

cereal_data_2020.country.unique()

"""### Plot Barplot"""

style.use('ggplot')

# set fig size
plt.figure(figsize=(15,10))

# set width of bars
barWidth = 0.1

# plot bar charts
plt.bar(np.arange(cereal_data_1990.shape[0]),cereal_data_1990['cereal_yield'],color='red', width=barWidth, label='1990')
plt.bar(np.arange(cereal_data_2000.shape[0])+0.2,cereal_data_2000['cereal_yield'],color='yellow',width=barWidth, label='2000')
plt.bar(np.arange(cereal_data_2010.shape[0])+0.4,cereal_data_2010['cereal_yield'],color='peru',width=barWidth, label='2010')
plt.bar(np.arange(cereal_data_2015.shape[0])+0.6,cereal_data_2015['cereal_yield'],color='blue',width=barWidth, label='2015')
plt.bar(np.arange(cereal_data_2020.shape[0])+0.8,cereal_data_2020['cereal_yield'],color='lime',width=barWidth, label='2020')

# show the legends on the plot
plt.legend()

# set the x-axis label
plt.xlabel('Country',fontsize=15)

# add title to the plot
plt.title("Cereal Data",fontsize=15)

# add countries names to the 11 groups on the x-axis
plt.xticks(np.arange(cereal_data_2020.shape[0])+0.2,('United Arab Emirates', 'Armenia', 'Belgium', 'France',
       'Indonesia', 'Kenya', 'Nepal', 'Saudi Arabia', 'Sweden',
       'Eswatini', 'Tajikistan'),fontsize=10,rotation = 45)

# show the plot
plt.show()

"""### Get data of Arable Land over the years"""

# we want to see countries arable_land over the years
# we need to filter our original data frame to get specific fields
arable_land = org_df[['country','year','arable_land']]

# drop the null values present in the dataset
arable_land = arable_land.dropna()

"""### Filter from specific year from 1990 to 2015"""

arable_land_1990 = arable_land[arable_land['year'] == 1990] # filter data related to 1990
arable_land_1995 = arable_land[arable_land['year'] == 1995] # filter data related to 1995
arable_land_2000 = arable_land[arable_land['year'] == 2000] # filter data related to 2000
arable_land_2005 = arable_land[arable_land['year'] == 2005] # filter data related to 2005
arable_land_2010 = arable_land[arable_land['year'] == 2010] # filter data related to 2010
arable_land_2015 = arable_land[arable_land['year'] == 2015] # filter data related to 2015

arable_land.country.unique()

"""### PLOT barplot"""

style.use('ggplot')

# set fig size
plt.figure(figsize=(15,10))

# set width of bars
barWidth = 0.1

# plot bar charts
plt.bar(np.arange(arable_land_1990.shape[0]),
        arable_land_1990['arable_land'],
        color='peru', width=barWidth, label='1990')

plt.bar(np.arange(arable_land_2000.shape[0])+0.2,
        arable_land_2000['arable_land'],
        color='darkblue',width=barWidth, label='2000')

plt.bar(np.arange(arable_land_2005.shape[0])+0.4,
        arable_land_2005['arable_land'],
        color='yellow',width=barWidth, label='2005')

plt.bar(np.arange(arable_land_2010.shape[0])+0.6,
        arable_land_2010['arable_land'],
        color='lime',width=barWidth, label='2010')

plt.bar(np.arange(arable_land_2015.shape[0])+0.80,
        arable_land_2015['arable_land'],
        color='darkviolet',width=barWidth, label='2015')


# show the legends on the plot
plt.legend()

# set the x-axis label
plt.xlabel('Country',fontsize=15)

# add title to the plot
plt.title("Arable Land",fontsize=15)

# add countries names to the 11 groups on the x-axis
plt.xticks(np.arange(arable_land_2015.shape[0])+0.2,
           ('United Arab Emirates', 'Armenia', 'Belgium', 'France',
       'Hong Kong SAR, China', 'Indonesia', 'Kenya', 'Nepal',
       'Saudi Arabia', 'Sweden', 'Eswatini', 'Tajikistan'),
             fontsize=10,rotation = 45)

# show the plot
plt.show()

org_df.country.unique()

"""### Making a DataFrame related to France Data"""

# making dataframe of india data from the original dataframe
fn = org_df[org_df['country'] == 'France']
fn.head(5)

"""### Implement a Function which removes Null values and return clean data"""

def remove_null_values(feature):
    return np.array(feature.dropna())

fn.columns

"""### For the Features Present In sa DataFrame remove the null values
### Print Each Features Size
"""

# Making dataframe of all the feature in the avaiable in
# India dataframe passing it to remove null values function
# for dropping the null values
nitrous_oxide = remove_null_values(fn[['nitrous_oxide']])

argicultural_land = remove_null_values(fn[['agricultural_land']])

co2_emission = remove_null_values(fn[['co2_emissions']])

arable_land = remove_null_values(fn[['arable_land']])

cereal_yield = remove_null_values(fn[['cereal_yield']])

greenhouse_gas_emissions = remove_null_values(fn[['greenhouse_gas_emissions']])

population = remove_null_values(fn[['population_growth']])

fresh_water = remove_null_values(fn[['fresh_water']])

urban_pop = remove_null_values(fn[['urban_population']])

gdp = remove_null_values(fn[['GDP']])

# find the lenght of each feature size
# this will help us in creating dataframe
# to avoid axis bound error in data frame creation
print('nitrous_oxide Length = '+str(len((nitrous_oxide))))
print('argicultural_land Length = '+str(len(argicultural_land)))
print('co2_emission Length = '+str(len(co2_emission)))
print('arable_land  Length = '+str(len(arable_land)))
print('cereal_yield Length = '+str(len(cereal_yield)))
print('greenhouse_gas_emissions Length = '+str(len(greenhouse_gas_emissions)))
print('population Length = '+str(len(population)))
print('urban_pop Length = '+str(len(urban_pop)))
print('gdp Length = '+str(len(gdp)))
print('fresh_water Length = '+str(len(fresh_water)))

"""### Make a new dataframe of no null values related to France"""

# after removing the null values we will create datafram
fn_clean_data = pd.DataFrame({'nitrous_oxide': [nitrous_oxide [x][0] for x in range(30)],
                                 'Argicultural_land': [argicultural_land[x][0] for x in range(30)],
                                 'co2_emission ': [co2_emission [x][0] for x in range(30)],
                                 'Arable_land': [arable_land[x][0] for x in range(30)],
                                 'cereal_yield  ': [cereal_yield  [x][0] for x in range(30)],
                                 'greenhouse_gas_emissions ': [greenhouse_gas_emissions [x][0] for x in range(30)],
                                 'Population': [population[x][0] for x in range(30)],
                                 'Urban_pop': [urban_pop[x][0] for x in range(30)],
                                 'GDP': [gdp[x][0] for x in range(30)],
                                 'fresh_water ': [fresh_water [x][0] for x in range(30)],
                                })

"""### Correlation Heatmap of France"""

# create correlation matrix
corr_matrix = fn_clean_data.corr()
plt.figure(figsize=(10,5))
# using seaborn library to create heatmap
sns.heatmap(corr_matrix, annot=True,cmap="YlGnBu")
plt.title("Correlation Heatmap of France")
plt.show()

corr_matrix

org_df.country.unique()

"""### Create a dataframe contain only  Belgium"""

# making dataframe of Belgium data
bg_df = org_df[org_df['country'] == 'Belgium']
bg_df.head(5)

"""### Remove Null values from Features"""

# Making dataframe of all the feature in the avaiable in
# Belgium dataframe passing it to remove null values function
# for dropping the null values
nitrous_oxide = remove_null_values(bg_df[['nitrous_oxide']])

argicultural_land = remove_null_values(bg_df[['agricultural_land']])

co2_emission = remove_null_values(bg_df[['co2_emissions']])

arable_land = remove_null_values(bg_df[['arable_land']])

cereal_yield = remove_null_values(bg_df[['cereal_yield']])

greenhouse_gas_emissions = remove_null_values(bg_df[['greenhouse_gas_emissions']])

population = remove_null_values(bg_df[['population_growth']])

fresh_water = remove_null_values(bg_df[['fresh_water']])

urban_pop = remove_null_values(bg_df[['urban_population']])

gdp = remove_null_values(bg_df[['GDP']])

# find the lenght of each feature size
# this will help us in creating dataframe
# to avoid axis bound error in data frame creation
print('nitrous_oxide Length = '+str(len((nitrous_oxide))))
print('argicultural_land Length = '+str(len(argicultural_land)))
print('co2_emission Length = '+str(len(co2_emission)))
print('arable_land  Length = '+str(len(arable_land)))
print('cereal_yield Length = '+str(len(cereal_yield)))
print('greenhouse_gas_emissions Length = '+str(len(greenhouse_gas_emissions)))
print('population Length = '+str(len(population)))
print('urban_pop Length = '+str(len(urban_pop)))
print('gdp Length = '+str(len(gdp)))
print('fresh_water Length = '+str(len(fresh_water)))

"""### Create a new DataFrame for Belgium data contain no null values"""

# after removing the null values we will create datafram
bg_clean_data = pd.DataFrame({'nitrous_oxide': [nitrous_oxide [x][0] for x in range(21)],
                                 'Argicultural_land': [argicultural_land[x][0] for x in range(21)],
                                 'co2_emission ': [co2_emission [x][0] for x in range(21)],
                                 'Arable_land': [arable_land[x][0] for x in range(21)],
                                 'cereal_yield  ': [cereal_yield  [x][0] for x in range(21)],
                                 'greenhouse_gas_emissions ': [greenhouse_gas_emissions [x][0] for x in range(21)],
                                 'Population': [population[x][0] for x in range(21)],
                                 'Urban_pop': [urban_pop[x][0] for x in range(21)],
                                 'GDP': [gdp[x][0] for x in range(21)],
                                 'fresh_water ': [fresh_water [x][0] for x in range(21)],
                                })

"""### Correlation Heatmap of Belgium"""

# create correlation matrix
corr_matrix = bg_clean_data.corr()
plt.figure(figsize=(10,5))
# using seaborn library to create heatmap
sns.heatmap(corr_matrix, annot=True,cmap="Blues")
plt.title("Correlation Heatmap of Belgium")
plt.show()

corr_matrix

org_df.country.unique()

"""### Make dataframe of United Arab Emirates data from the original dataframe"""

# making dataframe of Iran data from the original dataframe
uae_df = org_df[org_df['country'] == 'United Arab Emirates']
uae_df.head(5)

"""### For the Features Present In United Arab Emirates DataFrame remove the null values
### Print Each Features Size
"""

# Making dataframe of all the feature in the avaiable in
# Belgium dataframe passing it to remove null values function
# for dropping the null values
nitrous_oxide = remove_null_values(uae_df[['nitrous_oxide']])

argicultural_land = remove_null_values(uae_df[['agricultural_land']])

co2_emission = remove_null_values(uae_df[['co2_emissions']])

arable_land = remove_null_values(uae_df[['arable_land']])

cereal_yield = remove_null_values(uae_df[['cereal_yield']])

greenhouse_gas_emissions = remove_null_values(uae_df[['greenhouse_gas_emissions']])

population = remove_null_values(uae_df[['population_growth']])

fresh_water = remove_null_values(uae_df[['fresh_water']])

urban_pop = remove_null_values(uae_df[['urban_population']])

gdp = remove_null_values(uae_df[['GDP']])

# find the lenght of each feature size
# this will help us in creating dataframe
# to avoid axis bound error in data frame creation
print('nitrous_oxide Length = '+str(len((nitrous_oxide))))
print('argicultural_land Length = '+str(len(argicultural_land)))
print('co2_emission Length = '+str(len(co2_emission)))
print('arable_land  Length = '+str(len(arable_land)))
print('cereal_yield Length = '+str(len(cereal_yield)))
print('greenhouse_gas_emissions Length = '+str(len(greenhouse_gas_emissions)))
print('population Length = '+str(len(population)))
print('urban_pop Length = '+str(len(urban_pop)))
print('gdp Length = '+str(len(gdp)))
print('fresh_water Length = '+str(len(fresh_water)))

"""### Make a new dataframe of clean Data(no null values) related to United Arab Emirates"""

# after removing the null values we will create datafram
uae_clean_data = pd.DataFrame({'nitrous_oxide': [nitrous_oxide [x][0] for x in range(30)],
                                 'Argicultural_land': [argicultural_land[x][0] for x in range(30)],
                                 'co2_emission ': [co2_emission [x][0] for x in range(30)],
                                 'Arable_land': [arable_land[x][0] for x in range(30)],
                                 'cereal_yield  ': [cereal_yield  [x][0] for x in range(30)],
                                 'greenhouse_gas_emissions ': [greenhouse_gas_emissions [x][0] for x in range(30)],
                                 'Population': [population[x][0] for x in range(30)],
                                 'Urban_pop': [urban_pop[x][0] for x in range(30)],
                                 'GDP': [gdp[x][0] for x in range(30)],
                                 'fresh_water ': [fresh_water [x][0] for x in range(30)],
                                })

"""### Correlation Heatmap of United Arab Emirates Data Features"""

# create correlation matrix
corr_matrix = uae_clean_data.corr()
plt.figure(figsize=(10,5))
# using seaborn library to create heatmap
sns.heatmap(corr_matrix, annot=True,cmap="Greens")
plt.title("Correlation Heatmap of UAE")
plt.show()

corr_matrix

org_df.columns

"""### Get the Year, Country Data Related to greenhouse_gas_emissions"""

# we want to see countries greenhouse_gas_emissions over the years
# we need to filter our original data frame to get specific fields
ggh_emission_df = org_df[['country','year','greenhouse_gas_emissions']]

# drop the null values present in the dataset
ggh_emission_df= ggh_emission_df.dropna()

ggh_emission_df.country.unique() # shows the all the countries in country features

"""### Filter the Data For All the Countries"""

uae_emission = ggh_emission_df[ggh_emission_df['country'] == 'United Arab Emirates']
arm_emission = ggh_emission_df[ggh_emission_df['country']== 'Armenia']
bel_emission =  ggh_emission_df[ggh_emission_df['country'] == 'Belgium']
fn_emission = ggh_emission_df[ggh_emission_df['country'] == 'France']
in_emission = ggh_emission_df[ggh_emission_df['country'] == 'Indonesia']
nep_emission = ggh_emission_df[ggh_emission_df['country'] == 'Nepal']
sa_emission = ggh_emission_df[ggh_emission_df['country'] == 'Saudi Arabia']
sw_emission = ggh_emission_df[ggh_emission_df['country'] == 'Sweden']
es_emission = ggh_emission_df[ggh_emission_df['country'] == 'Eswatini']
tj_emission = ggh_emission_df[ggh_emission_df['country'] == 'Tajikistan']

"""### Line Plot of Co2 Emission"""

# set fig size
plt.figure(figsize=(15,10))

# set the line plot value on x-axis and y-axis by year and co2 emission respectively
plt.plot(uae_emission.year, uae_emission.greenhouse_gas_emissions, ':',label='United Arab Emirates')
plt.plot(arm_emission.year, arm_emission.greenhouse_gas_emissions,':',label='Armenia')
plt.plot(bel_emission.year, bel_emission.greenhouse_gas_emissions,':',label='Belgium')
plt.plot(fn_emission.year, fn_emission.greenhouse_gas_emissions,'-r',label='France')
plt.plot(in_emission.year, in_emission.greenhouse_gas_emissions,'--b',label='Indonesia')
plt.plot(nep_emission.year, nep_emission.greenhouse_gas_emissions,':',label='Nepal')
plt.plot(sa_emission.year, sa_emission.greenhouse_gas_emissions,':g',label='Saudi Arabia')
plt.plot(sw_emission.year, sw_emission.greenhouse_gas_emissions,':',label='Sweden')
plt.plot(es_emission.year, es_emission.greenhouse_gas_emissions,':c',label='Eswatini')
plt.plot(tj_emission.year, tj_emission.greenhouse_gas_emissions,':k',label='Tajikistan')

#Set the X-axis label and make it bold
plt.xlabel('Year',fontweight='bold')

# set the title
plt.title("Greenhouse Gas Emissions")

# show the legends on the plot and place it on suitable position
plt.legend(bbox_to_anchor=(0.89,0.6),shadow=True)

#show the line plot
plt.show()

org_df.columns

"""### Get the Year, Country Data Related to Urban Population"""

# we want to see countries urban_population over the years
# we need to filter our original data frame to get specific fields
urban_population_df = org_df[['country','year','urban_population']]

# drop the null values present in the dataset
urban_population_df  = urban_population_df.dropna()

"""### Filter the Data For All the Countries"""

uae_ur_land = urban_population_df[urban_population_df['country'] == 'United Arab Emirates']
arm_ur_land = urban_population_df[urban_population_df['country']== 'Armenia']
bel_ur_land =  urban_population_df[urban_population_df['country'] == 'Belgium']
fn_ur_land = urban_population_df[urban_population_df['country'] == 'France']
in_ur_land = urban_population_df[urban_population_df['country'] == 'Indonesia']
nep_ur_land = urban_population_df[urban_population_df['country'] == 'Nepal']
sa_ur_land = urban_population_df[urban_population_df['country'] == 'Saudi Arabia']
sw_ur_land = urban_population_df[urban_population_df['country'] == 'Sweden']
es_ur_land = urban_population_df[urban_population_df['country'] == 'Eswatini']
tj_ur_land = urban_population_df[urban_population_df['country'] == 'Tajikistan']

"""### Line Plot of arable_land"""

# set fig size
plt.figure(figsize=(15,10))

# set the line plot value on x-axis and y-axis by year and co2 emission respectively
plt.plot(uae_ur_land.year, uae_ur_land.urban_population, ':',label='United Arab Emirates')
plt.plot(arm_ur_land.year, arm_ur_land.urban_population,':',label='Armenia')
plt.plot(bel_ur_land.year, bel_ur_land.urban_population,':',label='Belgium')
plt.plot(fn_ur_land.year, fn_ur_land.urban_population,'-r',label='France')
plt.plot(in_ur_land.year, in_ur_land.urban_population,'--b',label='Indonesia')
plt.plot(nep_ur_land.year, nep_ur_land.urban_population,':',label='Nepal')
plt.plot(sa_ur_land.year, sa_ur_land.urban_population,':g',label='Saudi Arabia')
plt.plot(sw_ur_land.year, sw_ur_land.urban_population,':',label='Sweden')
plt.plot(es_ur_land.year, es_ur_land.urban_population,':c',label='Eswatini')
plt.plot(tj_ur_land.year, tj_ur_land.urban_population,':k',label='Tajikistan')

#Set the X-axis label and make it bold
plt.xlabel('Year',fontweight='bold')

# set the title
plt.title("Urban Population")

# show the legends on the plot and place it on suitable position
plt.legend(bbox_to_anchor=(0.15,0.5),shadow=True)

#show the line plot
plt.show()

org_df.columns

# we want to see countries population_growth over the years
population_growth = org_df[['country','year','population_growth']]

# drop the null values present in the dataset
population_growth = population_growth.dropna()

"""### Filter from specific year from 1990 to 2015"""

# filter data related to 1990
population_growth_1990 = population_growth[population_growth['year'] == 1990]

# filter data related to 2010
population_growth_2010 = population_growth[population_growth['year'] == 2010]

# filter data related to 2010
population_growth_2020 = population_growth[population_growth['year'] == 2020]

population_growth_1990

population_growth_2010

population_growth_2020